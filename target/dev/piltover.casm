jmp rel 15 if [fp + -6] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 2113561387378558640007916056212955719375468717479393106901732231050099, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 127;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 4270;
jmp rel 114 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 1001666092121413518972607095611289009321985163796988836773455972707894918717, ap++;
[ap + 0] = 432000, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -9] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
[ap + -2] = [[ap + -8] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 6], ap++;
jmp rel 89 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 289565229787362368933081636443797405535488074065834425092593015835915391953, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -13] + 7];
[ap + -4] = [[ap + -13] + 8];
[ap + -3] = [[ap + -13] + 9];
[ap + -2] = [[ap + -13] + 10];
[fp + -5] = [[ap + -13] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13] + 7) %}
[ap + 0] = [[ap + -13] + 13], ap++;
jmp rel 59 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1129664241071644691371073118594794953592340198277473102285062464307545102410, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -18] + 14];
[ap + -4] = [[ap + -18] + 15];
[ap + -3] = [[ap + -18] + 16];
[ap + -2] = [[ap + -18] + 17];
[fp + -4] = [[ap + -18] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18] + 14) %}
[ap + 0] = [[ap + -18] + 20], ap++;
jmp rel 35 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1804974537427402286278400303388660593172206410421526189703894999503593972097, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -23] + 21];
[ap + -4] = [[ap + -23] + 22];
[ap + -3] = [[ap + -23] + 23];
[ap + -2] = [[ap + -23] + 24];
[fp + -3] = [[ap + -23] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -23] + 21) %}
[ap + 0] = [[ap + -23] + 27], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [[ap + -25] + 26], ap++;
[ap + 0] = [ap + -26] + 28, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -24] + 26], ap++;
[ap + 0] = [ap + -25] + 30, ap++;
[ap + 0] = [[ap + -26] + 28], ap++;
[ap + 0] = [[ap + -27] + 29], ap++;
jmp rel 18;
ap += 5;
[ap + 0] = [[ap + -24] + 19], ap++;
[ap + 0] = [ap + -25] + 23, ap++;
[ap + 0] = [[ap + -26] + 21], ap++;
[ap + 0] = [[ap + -27] + 22], ap++;
jmp rel 9;
ap += 10;
[ap + 0] = [[ap + -24] + 12], ap++;
[ap + 0] = [ap + -25] + 16, ap++;
[ap + 0] = [[ap + -26] + 14], ap++;
[ap + 0] = [[ap + -27] + 15], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -11] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -13] + 7], ap++;
[ap + 0] = [[ap + -14] + 8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 4337;
jmp rel 90 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 289565229787362368933081636443797405535488074065834425092593015835915391953, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -8] = [[ap + -7] + 1];
[ap + -3] = [[ap + -7] + 2];
[ap + -2] = [[ap + -7] + 3];
[fp + -5] = [[ap + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 6], ap++;
jmp rel 61 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1129664241071644691371073118594794953592340198277473102285062464307545102410, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -12] + 7];
[ap + -4] = [[ap + -12] + 8];
[ap + -3] = [[ap + -12] + 9];
[ap + -2] = [[ap + -12] + 10];
[fp + -4] = [[ap + -12] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12] + 7) %}
[ap + 0] = [[ap + -12] + 13], ap++;
jmp rel 37 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1804974537427402286278400303388660593172206410421526189703894999503593972097, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -17] + 14];
[ap + -4] = [[ap + -17] + 15];
[ap + -3] = [[ap + -17] + 16];
[ap + -2] = [[ap + -17] + 17];
[fp + -3] = [[ap + -17] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17] + 14) %}
[ap + 0] = [[ap + -17] + 20], ap++;
jmp rel 15 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [[ap + -23] + 19], ap++;
[ap + 0] = [ap + -24] + 21, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -18] + 19], ap++;
[ap + 0] = [ap + -19] + 23, ap++;
[ap + 0] = [[ap + -20] + 21], ap++;
[ap + 0] = [[ap + -21] + 22], ap++;
jmp rel 18;
ap += 5;
[ap + 0] = [[ap + -18] + 12], ap++;
[ap + 0] = [ap + -19] + 16, ap++;
[ap + 0] = [[ap + -20] + 14], ap++;
[ap + 0] = [[ap + -21] + 15], ap++;
jmp rel 9;
ap += 10;
[ap + 0] = [[ap + -18] + 5], ap++;
[ap + 0] = [ap + -19] + 9, ap++;
[ap + 0] = [[ap + -20] + 7], ap++;
[ap + 0] = [[ap + -21] + 8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 18;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
ret;
ret;
%{ memory[ap + 0] = 4580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 223;
[fp + -6] = [ap + 0] + 4580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 180 if [ap + -2] != 0;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -12] + 2];
jmp rel 162;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -11] + 2];
[ap + 0] = [ap + -11] + 3, ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 133;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 110;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 87;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 11658;
[ap + 0] = [ap + -1] + 11657, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 101680 <= memory[ap + -30] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -31] = [ap + 0] + 101680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 35;
[ap + -31] = [ap + 0] + 101680, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -14], ap++;
call rel -382;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492916, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492915, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -12] + 3, ap++;
jmp rel 5;
ap += 6;
[ap + 0] = [ap + -12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = 2770 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208686, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 229;
[fp + -6] = [ap + 0] + 2770, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 205;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 182;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 159;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 11460;
[ap + 0] = [ap + -1] + 11459, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 58110 <= memory[ap + -19] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -20] = [ap + 0] + 58110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 107;
[ap + -20] = [ap + 0] + 58110, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 3912;
jmp rel 82 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 289565229787362368933081636443797405535488074065834425092593015835915391953, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -8] = [[ap + -7] + 1];
[ap + -3] = [[ap + -7] + 2];
[ap + -2] = [[ap + -7] + 3];
[ap + -52] = [[ap + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 6], ap++;
jmp rel 59 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1129664241071644691371073118594794953592340198277473102285062464307545102410, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -12] + 7];
[ap + -4] = [[ap + -12] + 8];
[ap + -3] = [[ap + -12] + 9];
[ap + -2] = [[ap + -12] + 10];
[ap + -53] = [[ap + -12] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12] + 7) %}
[ap + 0] = [[ap + -12] + 13], ap++;
jmp rel 35 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1804974537427402286278400303388660593172206410421526189703894999503593972097, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -17] + 14];
[ap + -4] = [[ap + -17] + 15];
[ap + -3] = [[ap + -17] + 16];
[ap + -2] = [[ap + -17] + 17];
[ap + -54] = [[ap + -17] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17] + 14) %}
[ap + 0] = [[ap + -17] + 20], ap++;
jmp rel 13 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [[ap + -20] + 19], ap++;
[ap + 0] = [ap + -21] + 21, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[ap + -18] + 19], ap++;
[ap + 0] = [ap + -19] + 23, ap++;
[ap + 0] = [[ap + -20] + 21], ap++;
[ap + 0] = [[ap + -21] + 22], ap++;
jmp rel 18;
ap += 5;
[ap + 0] = [[ap + -18] + 12], ap++;
[ap + 0] = [ap + -19] + 16, ap++;
[ap + 0] = [[ap + -20] + 14], ap++;
[ap + 0] = [[ap + -21] + 15], ap++;
jmp rel 9;
ap += 10;
[ap + 0] = [[ap + -18] + 5], ap++;
[ap + 0] = [ap + -19] + 9, ap++;
[ap + 0] = [[ap + -20] + 7], ap++;
[ap + 0] = [[ap + -21] + 8], ap++;
jmp rel 8;
ap += 14;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492915, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = 14910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768196546, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 324;
[fp + -6] = [ap + 0] + 14910, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3853;
jmp rel 303 if [ap + -6] != 0;
jmp rel 285 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 3844;
jmp rel 268 if [ap + -6] != 0;
jmp rel 250 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 229;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 185 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -18] + 0], ap++;
[ap + 3] = [[ap + -19] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -23] + 2];
jmp rel 158 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 8;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 127 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 102 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 18;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
call rel 11116;
[ap + 0] = [ap + -1] + 11115, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 408660, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -102] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -103] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 43;
[ap + -103] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -23], ap++;
call rel 3868;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[ap + 0] = [ap + -13] + 3, ap++;
jmp rel 5;
ap += 7;
[ap + 0] = [ap + -13], ap++;
jmp rel 11;
ap += 8;
[ap + 0] = [ap + -31] + 3, ap++;
jmp rel 5;
ap += 15;
[ap + 0] = [ap + -31], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492916, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492915, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
%{ memory[ap + 0] = 3080 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208376, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 170;
[fp + -6] = [ap + 0] + 3080, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 127 if [ap + -2] != 0;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -12] + 2];
jmp rel 109;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -11] + 2];
[ap + 0] = [ap + -11] + 3, ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 10847;
[ap + 0] = [ap + -1] + 10846, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 56680 <= memory[ap + -18] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -19] = [ap + 0] + 56680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 51;
[ap + -19] = [ap + 0] + 56680, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 3299;
jmp rel 27 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -50], ap++;
call rel 4614;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -12] + 3, ap++;
jmp rel 5;
ap += 6;
[ap + 0] = [ap + -12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ret;
%{ memory[ap + 0] = 1670 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209786, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 137;
[fp + -6] = [ap + 0] + 1670, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 113;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 10693;
[ap + 0] = [ap + -1] + 10692, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 3570 <= memory[ap + -10] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -11] = [ap + 0] + 3570, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 0];
jmp rel 62;
[ap + -11] = [ap + 0] + 3570, ap++;
[ap + -1] = [[ap + -11] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 60, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 1, ap++;
[ap + -6] = [[ap + -7] + 0];
[ap + -5] = [[ap + -7] + 1];
[ap + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
[ap + -2] = [[ap + -7] + 4];
[ap + -1] = [[ap + -7] + 5];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 6, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [ap + 0] * 6, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
call rel 4550;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 10;
[ap + -1] = [[fp + -7] + 0];
ap += 1;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 4515;
jmp rel 11 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 4477;
jmp rel 987 if [ap + -7] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 10, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 4461;
jmp rel 936 if [ap + -7] != 0;
[fp + 0] = [ap + -2];
[fp + 1] = [ap + -1];
[ap + 0] = 8, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 883;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + 0] = [fp + 0] + [ap + -5], ap++;
[ap + 0] = 9, ap++;
[fp + 3] = [[ap + -2] + 0];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -19] + 1];
jmp rel 826;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [fp + 0] + [ap + -5], ap++;
[ap + 0] = [ap + -21] + 2, ap++;
[fp + 2] = [[ap + -2] + 0];
jmp rel 8 if [fp + 3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 108;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 4403;
jmp rel 759 if [ap + -7] != 0;
[ap + 0] = 1, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 708;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + 0] = [ap + -7] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -20] + 1], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -22] + 2], ap++;
[ap + -5] = [[ap + -23] + 3];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 644 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -17] + 1];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -18] + 2];
[ap + 0] = 4, ap++;
[ap + 0] = [ap + -1] * [ap + -4], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 4294967296 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -22] + 3];
jmp rel 586;
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -22] + 3];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -27] + 4];
jmp rel 10;
[ap + -1] = [[ap + -26] + 4];
ap += 1;
[ap + 0] = [ap + -27] + 5, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 6;
[ap + 0] = [ap + -27] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 4317;
jmp rel 512 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 856;
jmp rel 469 if [ap + -7] != 0;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 423;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 0] + 0], ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -15] + 0];
jmp rel 371;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + 0] = [fp + 0] + [ap + -6], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -22] + 1];
jmp rel 314;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -23] + 1];
[ap + 0] = [fp + 0] + [ap + -6], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -29] + 2];
jmp rel 257;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -30] + 2];
[ap + 0] = [fp + 0] + [ap + -6], ap++;
[ap + 0] = 4, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -36] + 3];
jmp rel 200;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -37] + 3];
[ap + 0] = [fp + 0] + [ap + -6], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -43] + 4];
jmp rel 143;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -44] + 4];
[ap + 0] = [fp + 0] + [ap + -6], ap++;
[ap + 0] = 6, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -50] + 5];
jmp rel 86;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -51] + 5];
[ap + 0] = [fp + 0] + [ap + -6], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -57] + 6];
jmp rel 29;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -58] + 6];
[ap + 0] = [fp + 0] + [ap + -6], ap++;
[ap + 0] = [ap + -59] + 7, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -69], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -59] + 7, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -52] + 6, ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -45] + 5, ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -38] + 4, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -31] + 3, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -24] + 2, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504327651875780457110017927835511, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 381278114803728420502066901717836403, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -25] + 4, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -21] + 2, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
ret;
ap += 10;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 311 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -6] + 1], ap++;
[ap + -5] = [[fp + -6] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 272 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -6] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -6] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 2];
jmp rel 10;
[ap + -1] = [[fp + -6] + 2];
ap += 1;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 6;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 3375;
jmp rel 215 if [ap + -7] != 0;
[fp + 8] = [ap + -2];
[fp + 9] = [ap + -1];
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 8;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 171 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -19] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -21] + 1], ap++;
[ap + -5] = [[ap + -22] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 132 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -16] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -17] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -22] + 2];
jmp rel 10;
[ap + -1] = [[ap + -21] + 2];
ap += 1;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 6;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 3293;
jmp rel 75 if [ap + -7] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[fp + 0] = [ap + -11];
[fp + 1] = [ap + -10];
[fp + 6] = [ap + -9];
[fp + 7] = [ap + -8];
call rel 3444;
jmp rel 44 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[fp + 2] = [ap + -11];
[fp + 3] = [ap + -10];
[fp + 4] = [ap + -9];
[fp + 5] = [ap + -8];
call rel 3785;
jmp rel 13 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1800534990000851789235858994292134280692212082929840385074, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1800534990000851789235858994292134280692212082929840385073, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 3259;
jmp rel 11 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 3584;
jmp rel 11 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
jmp rel 17 if [fp + -3] != 0;
ap += 77;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 2113561387378558640007916056212955719375468717479393106901732231050099, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 27;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3965;
jmp rel 14 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ret;
%{ memory[ap + 0] = 3080 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208376, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 172;
[fp + -6] = [ap + 0] + 3080, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 129 if [ap + -2] != 0;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -12] + 2];
jmp rel 111;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -11] + 2];
[ap + 0] = [ap + -11] + 3, ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 8937;
[ap + 0] = [ap + -1] + 8936, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 52210 <= memory[ap + -18] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -19] = [ap + 0] + 52210, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 53;
[ap + -19] = [ap + 0] + 52210, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
jmp rel 15 if [ap + -15] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 2113561387378558640007916056212955719375468717479393106901732231050099, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 25;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -18], ap++;
call rel 3821;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -12] + 3, ap++;
jmp rel 5;
ap += 6;
[ap + 0] = [ap + -12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -8] = [[ap + -1] + 0];
[fp + -7] = [[ap + -1] + 1];
[fp + -3] = [[ap + -1] + 2];
[fp + -6] = [[ap + -1] + 3];
[fp + -4] = [ap + 0] + [fp + -5], ap++;
[ap + -1] = [[ap + -2] + 4];
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 5, ap++;
[ap + 0] = 0, ap++;
call rel 3897;
jmp rel 39 if [ap + -4] != 0;
call rel 8800;
[ap + 0] = [ap + -1] + 8799, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 3993;
jmp rel 11 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -6] = [[ap + -1] + 0];
[fp + -5] = [[ap + -1] + 1];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + -1] = [[ap + -2] + 2];
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 3, ap++;
[ap + 0] = 0, ap++;
call rel 4100;
jmp rel 39 if [ap + -4] != 0;
call rel 8736;
[ap + 0] = [ap + -1] + 8735, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 3929;
jmp rel 11 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1001666092121413518972607095611289009321985163796988836773455972707894918717, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
[fp + -3] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
ret;
%{ memory[ap + 0] = 2810 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208646, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 161;
[fp + -6] = [ap + 0] + 2810, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 97 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 8581;
[ap + 0] = [ap + -1] + 8580, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 10700 <= memory[ap + -16] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -17] = [ap + 0] + 10700, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 41;
[ap + -17] = [ap + 0] + 10700, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = 0, ap++;
[ap + 0] = 1001666092121413518972607095611289009321985163796988836773455972707894918717, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
[ap + -15] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 13 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -14] + 3, ap++;
jmp rel 5;
ap += 8;
[ap + 0] = [ap + -14], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 289565229787362368933081636443797405535488074065834425092593015835915391953, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
[fp + -5] = [[fp + -6] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 6], ap++;
jmp rel 60 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1129664241071644691371073118594794953592340198277473102285062464307545102410, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 7];
[ap + -4] = [[fp + -6] + 8];
[ap + -3] = [[fp + -6] + 9];
[ap + -2] = [[fp + -6] + 10];
[fp + -4] = [[fp + -6] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 7) %}
[ap + 0] = [[fp + -6] + 13], ap++;
jmp rel 36 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1804974537427402286278400303388660593172206410421526189703894999503593972097, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 14];
[ap + -4] = [[fp + -6] + 15];
[ap + -3] = [[fp + -6] + 16];
[ap + -2] = [[fp + -6] + 17];
[fp + -3] = [[fp + -6] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 14) %}
[ap + 0] = [[fp + -6] + 20], ap++;
jmp rel 14 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[fp + -6] + 19], ap++;
[ap + 0] = [fp + -6] + 21, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -6] + 19], ap++;
[ap + 0] = [fp + -6] + 23, ap++;
[ap + 0] = [[fp + -6] + 21], ap++;
[ap + 0] = [[fp + -6] + 22], ap++;
jmp rel 18;
ap += 5;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [fp + -6] + 16, ap++;
[ap + 0] = [[fp + -6] + 14], ap++;
[ap + 0] = [[fp + -6] + 15], ap++;
jmp rel 9;
ap += 10;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [fp + -6] + 9, ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ret;
%{ memory[ap + 0] = 2770 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208686, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 215;
[fp + -6] = [ap + 0] + 2770, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 191;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 168;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 145;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 8332;
[ap + 0] = [ap + -1] + 8331, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 33300 <= memory[ap + -19] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -20] = [ap + 0] + 33300, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 93;
[ap + -20] = [ap + 0] + 33300, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = 0, ap++;
[ap + 0] = 289565229787362368933081636443797405535488074065834425092593015835915391953, ap++;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
[ap + -20] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 59 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1129664241071644691371073118594794953592340198277473102285062464307545102410, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[ap + -21] = [[fp + -5] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 35 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1804974537427402286278400303388660593172206410421526189703894999503593972097, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 14];
[ap + -4] = [[fp + -5] + 15];
[ap + -3] = [[fp + -5] + 16];
[ap + -2] = [[fp + -5] + 17];
[ap + -22] = [[fp + -5] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 14) %}
[ap + 0] = [[fp + -5] + 20], ap++;
jmp rel 13 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [[fp + -5] + 19], ap++;
[ap + 0] = [fp + -5] + 21, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -5] + 19], ap++;
[ap + 0] = [fp + -5] + 23, ap++;
[ap + 0] = [[fp + -5] + 21], ap++;
[ap + 0] = [[fp + -5] + 22], ap++;
jmp rel 18;
ap += 5;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
jmp rel 9;
ap += 10;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492915, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 2;
[fp + -6] = [fp + 1] + [fp + -7];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
call rel 3618;
jmp rel 312 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 3761;
jmp rel 293 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 3838;
jmp rel 274 if [ap + -3] != 0;
[ap + 0] = 82898831237483, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -5] = [[fp + -8] + 1];
[ap + -3] = [[fp + -8] + 2];
[ap + -2] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 257 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + -2] = [[ap + -5] + 2];
[ap + -1] = [[ap + -5] + 3];
[ap + 0] = [[fp + -8] + 4], ap++;
[fp + 0] = [fp + -8] + 8;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 4, ap++;
%{ memory[ap + 0] = memory[fp + -5] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -5], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -16] + 0], ap++;
[ap + 3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -21] + 2];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -5] = [[ap + -16] + 0];
ap += 5;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [[ap + -12] + 0];
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [fp + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 11;
[ap + -1] = [[ap + -10] + 0];
ap += 4;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 17;
[ap + 0] = 1, ap++;
[ap + 1] = [fp + -3] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 150;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 140 if [ap + -10] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [[ap + -13] + 0];
[ap + -1] = [[ap + -13] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 3627;
jmp rel 110 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 3704;
jmp rel 91 if [ap + -3] != 0;
[ap + 0] = 82898831237483, ap++;
[ap + -1] = [[fp + 0] + 0];
[ap + -5] = [[fp + 0] + 1];
[ap + -3] = [[fp + 0] + 2];
[ap + -2] = [[fp + 0] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 0]) %}
[ap + 0] = [[fp + 0] + 5], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 0] + 4], ap++;
[ap + 0] = [fp + 0] + 8, ap++;
[ap + 0] = [[fp + 0] + 7], ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 0];
jmp rel 11;
[ap + -1] = [[ap + -15] + 0];
ap += 4;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 17;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -6] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 1];
jmp rel 20;
[ap + -1] = [[ap + -19] + 1];
[ap + 0] = [ap + -19] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 10 if [ap + -10] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
jmp rel 6;
ap += 2;
[ap + 0] = [ap + -22] + 2, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39879774624079483812136948410799859986295, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + 0] + 4], ap++;
[ap + 0] = [fp + 0] + 8, ap++;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [[fp + 0] + 7], ap++;
jmp rel 14;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
jmp rel 6;
ap += 2;
[ap + 0] = [ap + -17] + 2, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39879774624079483812136948410799859986295, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
jmp rel 21;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 14;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
call rel 3281;
jmp rel 69 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 3424;
jmp rel 49 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 3501;
jmp rel 29 if [ap + -3] != 0;
[ap + 0] = 82898831237483, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 11 if [ap + -1] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = 1014900818724271728842439076957192829503821588950108430443072887165436450886, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -3] = [[fp + -4] + 3];
[ap + -2] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 174 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1239149872729906871793169171313897310809028090219849129902089947133222824240, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -4] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 146 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 14, ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 114;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + 0] = 0, ap++;
[ap + 0] = 1239149872729906871793169171313897310809028090219849129902089947133222824240, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -11] = [[ap + -10] + 1];
[ap + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
[fp + -3] = [[ap + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 6], ap++;
jmp rel 81 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -14] + 5], ap++;
[ap + 0] = 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -17], ap++;
[fp + 0] = [ap + -30] + 7;
call rel 3589;
jmp rel 31 if [ap + -5] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + 0] + 0];
[ap + -7] = [[fp + 0] + 1];
[ap + -5] = [[fp + 0] + 2];
[ap + -4] = [[fp + 0] + 3];
[ap + -3] = [[fp + 0] + 4];
[ap + -2] = [[fp + 0] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 0]) %}
[ap + 0] = [[fp + 0] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [fp + 0] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [fp + 0] + 10, ap++;
[ap + 0] = [[fp + 0] + 8], ap++;
[ap + 0] = [[fp + 0] + 9], ap++;
jmp rel 8;
ap += 2;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
[ap + 0] = [[ap + -16] + 8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [[fp + -4] + 14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1239149872729906871793169171313897310809028090219849129902089947133222824240, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 98 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 64;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -9] = [[ap + -8] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 3], ap++;
jmp rel 36 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + -1] = [ap + 0] + [ap + -13], ap++;
[ap + 0] = [[ap + -12] + 2], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
jmp rel 14 if [ap + -3] != 0;
ap += 2;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6453775547044262656980513251389146108192067417835201906, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 7;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -17] + 2], ap++;
[ap + 0] = [ap + -18] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -21] + 5], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 10;
ap += 13;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 152 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 120 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [ap + -2] + [ap + -5], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -2] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -5] + 2];
jmp rel 81;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + -11] = [ap + 0] + [ap + -12], ap++;
[ap + 0] = [ap + -13] + [ap + -6], ap++;
[ap + 0] = [ap + -14] + [ap + -5], ap++;
[ap + -3] = [ap + 1] + [ap + -11], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 3];
jmp rel 47;
[ap + -1] = [[fp + -5] + 3];
[ap + -16] = [ap + 0] + [ap + -17], ap++;
[ap + 0] = [ap + -14] + [ap + -2], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -2] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -5] + 4];
jmp rel 17;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -5] + 4];
ap += 3;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26] + [ap + -22], ap++;
[ap + 0] = [ap + -27] + [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
ap += 9;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
ap += 12;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 20;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 38;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -10], ap++;
call rel 3415;
jmp rel 997 if [ap + -3] != 0;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + -6] = [[ap + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -5]) %}
[ap + 0] = [[ap + -5] + 3], ap++;
jmp rel 973 if [ap + -1] != 0;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [[ap + -8] + 2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -10] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
call rel 3486;
[fp + 6] = [ap + -5];
jmp rel 953 if [ap + -3] != 0;
jmp rel 16 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1818051507018936363846633263532984159956816720522955320138013221351282, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
jmp rel 952;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 897951062914455787057706264758967433291621382369224120925925183454734167898, ap++;
call rel 3635;
[fp + 37] = [ap + -7];
jmp rel 913 if [ap + -6] != 0;
jmp rel 907 if [ap + -5] != 0;
[ap + 0] = 2, ap++;
[fp + -8] = [ap + 0] + [fp + -9], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 881;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + 0] = [fp + -9] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -9] = [ap + 0] + [ap + -1], ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[fp + 36] = [ap + -13];
[fp + 35] = [ap + -12];
jmp rel 852 if [ap + -2] != 0;
[ap + 0] = 2, ap++;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 826;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [fp + -7] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -17] = [ap + 0] + [ap + -1], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
jmp rel 799 if [ap + -2] != 0;
call rel 7118;
[ap + 0] = [ap + -1] + 7117, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
call rel 2311;
jmp rel 769 if [ap + -4] != 0;
[ap + 0] = 4, ap++;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 743;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [fp + -7] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -8] = [ap + 0] + [ap + -1], ap++;
[ap + 0] = [ap + -15] + 1, ap++;
jmp rel 716 if [ap + -2] != 0;
call rel 7078;
[ap + 0] = [ap + -1] + 7077, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 2271;
[fp + 15] = [ap + -5];
jmp rel 685 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[fp + 16] = [ap + -7];
[fp + 17] = [ap + -6];
[fp + 18] = [ap + -5];
call rel -3469;
jmp rel 664 if [ap + -17] != 0;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + 37], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + 19] = [ap + -24];
[fp + 20] = [ap + -23];
[fp + 21] = [ap + -22];
[fp + 22] = [ap + -21];
[fp + 23] = [ap + -20];
[fp + 24] = [ap + -19];
[fp + 25] = [ap + -18];
[fp + 26] = [ap + -17];
[fp + 27] = [ap + -16];
[fp + 28] = [ap + -15];
[fp + 29] = [ap + -14];
[fp + 30] = [ap + -13];
[fp + 31] = [ap + -12];
[fp + 32] = [ap + -11];
[fp + 33] = [ap + -10];
[fp + 34] = [ap + -9];
call rel -1133;
[fp + 14] = [ap + -4];
jmp rel 625 if [ap + -3] != 0;
[fp + 28] = [ap + 0] + [fp + 35], ap++;
[fp + 12] = [ap + -3];
[fp + 13] = [ap + -2];
jmp rel 604 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 36] = [[ap + -1] + 0];
[fp + 18] = [[ap + -1] + 1];
call rel 7008;
[ap + 0] = [ap + -1] + 7007, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 2, ap++;
call rel 2200;
[fp + 7] = [ap + -5];
jmp rel 568 if [ap + -4] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 1229685481650523187208926305059271985877225951187549955016730480626818673443, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + 14] + 0];
[ap + -9] = [[fp + 14] + 1];
[ap + -3] = [[fp + 14] + 2];
[ap + -2] = [[fp + 14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 14]) %}
[ap + 0] = [[fp + 14] + 5], ap++;
jmp rel 539 if [ap + -1] != 0;
[ap + 0] = [[fp + 14] + 6], ap++;
[ap + 0] = [[fp + 14] + 4], ap++;
[ap + 0] = [fp + 14] + 7, ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 0], ap++;
[ap + -4] = [[ap + -19] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -20] + 2];
jmp rel 507;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -19] + 2];
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -17], ap++;
call rel 3578;
[fp + 5] = [ap + -4];
jmp rel 478 if [ap + -3] != 0;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [ap + 0] * 6, ap++;
jmp rel 18 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 9620165862107269247563524614693409984243044, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 436;
[ap + 0] = 50, ap++;
[ap + 0] = [[ap + -6] + 1], ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 95;
[ap + -1] = [[ap + -13] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 172180977190876322177717838039515195832848434314570014065145845158662924655, ap++;
[ap + 0] = 31, ap++;
call rel 3628;
jmp rel 66 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 2977724126832983152220614533332949611231434621332031895370267144249390, ap++;
[ap + 0] = 29, ap++;
call rel 3615;
jmp rel 43 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + 8] = [ap + -6];
[fp + 9] = [ap + -5];
[fp + 10] = [ap + -4];
[fp + 11] = [ap + -3];
[fp + 9] = [ap + 0] + [fp + 8], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -255], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 4691;
jmp rel 9 if [ap + -3] != 0;
[fp + 10] = [[ap + -1] + 0];
[fp + 11] = [[ap + -1] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2, ap++;
jmp rel 4;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -252], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -133], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 12], ap++;
[ap + 0] = [fp + 13], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -17], ap++;
call rel 2744;
jmp rel 281 if [ap + -5] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + 5] + 0];
[ap + -7] = [[fp + 5] + 1];
[ap + -5] = [[fp + 5] + 2];
[ap + -4] = [[fp + 5] + 3];
[ap + -3] = [[fp + 5] + 4];
[ap + -2] = [[fp + 5] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 5]) %}
[ap + 0] = [[fp + 5] + 7], ap++;
jmp rel 263 if [ap + -1] != 0;
[ap + 0] = [[fp + 5] + 6], ap++;
[ap + 0] = [fp + 5] + 8, ap++;
[ap + 0] = [fp + 21], ap++;
[ap + 0] = [fp + 22], ap++;
[ap + 0] = [fp + 23], ap++;
[ap + 0] = [fp + 24], ap++;
[ap + 0] = [fp + 25], ap++;
[ap + 0] = [fp + 26], ap++;
[ap + 0] = [fp + 27], ap++;
[ap + 0] = [fp + 28], ap++;
[ap + 0] = [fp + 29], ap++;
[ap + 0] = [fp + 30], ap++;
[ap + 0] = [fp + 31], ap++;
[ap + 0] = [fp + 32], ap++;
[ap + 0] = [fp + 33], ap++;
[ap + 0] = [fp + 34], ap++;
call rel 4636;
jmp rel 232 if [ap + -3] != 0;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 31], ap++;
[ap + 0] = [fp + 32], ap++;
call rel 4797;
jmp rel 211 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 33], ap++;
[ap + 0] = [fp + 34], ap++;
call rel 5093;
[fp + 2] = [ap + -6];
[fp + 1] = [ap + -5];
jmp rel 188 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 156362789606235336197082706430724496541581765233419757414883543862011615425, ap++;
[ap + 0] = 0, ap++;
[fp + 3] = [ap + -5];
[fp + 4] = [ap + -4];
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -11] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
[ap + -2] = [[ap + -8] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 6], ap++;
jmp rel 159 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 289565229787362368933081636443797405535488074065834425092593015835915391953, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 7];
[ap + -4] = [[ap + -13] + 8];
[ap + -3] = [[ap + -13] + 9];
[ap + -2] = [[ap + -13] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13] + 7) %}
[ap + 0] = [[ap + -13] + 12], ap++;
jmp rel 134 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1129664241071644691371073118594794953592340198277473102285062464307545102410, ap++;
[ap + 0] = [[ap + -17] + 13], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -19] + 14];
[ap + -5] = [[ap + -19] + 15];
[ap + -4] = [[ap + -19] + 16];
[ap + -3] = [[ap + -19] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 14) %}
[ap + 0] = [[ap + -19] + 19], ap++;
jmp rel 108 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1804974537427402286278400303388660593172206410421526189703894999503593972097, ap++;
[ap + 0] = [[ap + -23] + 20], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -25] + 21];
[ap + -5] = [[ap + -25] + 22];
[ap + -4] = [[ap + -25] + 23];
[ap + -3] = [[ap + -25] + 24];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25] + 21) %}
[ap + 0] = [[ap + -25] + 26], ap++;
jmp rel 82 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [[ap + -29] + 25], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [[ap + -40] + 27], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -17], ap++;
[fp + 0] = [ap + -45] + 28;
call rel 2591;
jmp rel 37 if [ap + -5] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + 0] + 0];
[ap + -7] = [[fp + 0] + 1];
[ap + -5] = [[fp + 0] + 2];
[ap + -4] = [[fp + 0] + 3];
[ap + -3] = [[fp + 0] + 4];
[ap + -2] = [[fp + 0] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 0]) %}
[ap + 0] = [[fp + 0] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 0] + 8], ap++;
[ap + 0] = [[fp + 0] + 9], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [[ap + -27] + 25], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -30] + 29, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -32] + 27], ap++;
[ap + 0] = [[ap + -33] + 28], ap++;
ret;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [[ap + -21] + 18], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -24] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -26] + 20], ap++;
[ap + 0] = [[ap + -27] + 21], ap++;
ret;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [[ap + -15] + 11], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -18] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -20] + 13], ap++;
[ap + 0] = [[ap + -21] + 14], ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
[ap + 0] = [[ap + -16] + 8], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[fp + 5] + 6], ap++;
[ap + 0] = [fp + 5] + 10, ap++;
[ap + 0] = [[fp + 5] + 8], ap++;
[ap + 0] = [[fp + 5] + 9], ap++;
jmp rel 8;
ap += 2;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 8;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [[fp + 14] + 4], ap++;
[ap + 0] = [fp + 14] + 8, ap++;
[ap + 0] = [[fp + 14] + 6], ap++;
[ap + 0] = [[fp + 14] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 724574566520767346228302095033203131387730042924968011985768, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + 14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + 14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + 37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + 37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 724574566520767346228302095033203145923285481630111988020072, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + 37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + 37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 2657560577550330425645666312443504326612906961983135380328, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 185491089029316440634445336328500005662195537585262385124438888, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 4;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 9;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [[ap + -7] + 2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -9] + 6, ap++;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 1;
jmp rel 16 if [fp + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 423223302514606273361610285513559705916828015570713607238255, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = 25500403217443378527601783667, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[fp + -3] = [[fp + -4] + 2];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 4], ap++;
jmp rel 82 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -17], ap++;
[fp + 0] = [fp + -4] + 5;
call rel 2114;
jmp rel 31 if [ap + -5] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + 0] + 0];
[ap + -7] = [[fp + 0] + 1];
[ap + -5] = [[fp + 0] + 2];
[ap + -4] = [[fp + 0] + 3];
[ap + -3] = [[fp + 0] + 4];
[ap + -2] = [[fp + 0] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 0]) %}
[ap + 0] = [[fp + 0] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [fp + 0] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [fp + 0] + 10, ap++;
[ap + 0] = [[fp + 0] + 8], ap++;
[ap + 0] = [[fp + 0] + 9], ap++;
jmp rel 8;
ap += 2;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 3], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
ret;
%{ memory[ap + 0] = 2670 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768208786, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 42;
[fp + -7] = [ap + 0] + 2670, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 25;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + -6] = [[fp + -3] + 0];
[ap + -5] = [[fp + -3] + 1];
[ap + -4] = [[fp + -3] + 2];
[ap + -3] = [[fp + -3] + 3];
[ap + -2] = [[fp + -3] + 4];
[ap + -1] = [[fp + -3] + 5];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 6, ap++;
call rel -37;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
%{ memory[ap + 0] = 3740 <= memory[fp + -9] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -9] + 340282366920938463463374607431768207716, ap++;
[ap + -1] = [[fp + -10] + 0];
jmp rel 140;
[fp + -9] = [ap + 0] + 3740, ap++;
[ap + -1] = [[fp + -10] + 0];
[ap + 0] = [fp + -10] + 1, ap++;
[fp + -8] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 119;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -8] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 87;
[ap + 1] = [fp + -8] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
jmp rel 6;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 38 if [ap + -2] != 0;
jmp rel 15 if [ap + -2] != 0;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -77;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 13860 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768197596, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 332;
[fp + -7] = [ap + 0] + 13860, ap++;
[ap + -1] = [[fp + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel -192;
jmp rel 301 if [ap + -7] != 0;
[fp + 0] = [ap + -2];
[fp + 1] = [ap + -1];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = 3, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 278;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = 2, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 1];
jmp rel 250;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -18] + 1];
[ap + 0] = [fp + 0] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -24] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -26] + 3], ap++;
[ap + -5] = [[ap + -27] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 210 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -21] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -22] + 3];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -27] + 4];
jmp rel 10;
[ap + -1] = [[ap + -26] + 4];
ap += 1;
[ap + 0] = [ap + -27] + 5, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 6;
[ap + 0] = [ap + -27] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel -279;
jmp rel 157 if [ap + -7] != 0;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 135;
[ap + 0] = [[fp + 0] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 102;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = 1, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -20] + 3];
jmp rel 67;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -21] + 3];
[ap + 0] = [fp + 0] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -27] + 4], ap++;
[ap + -4] = [[ap + -28] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -29] + 6];
jmp rel 29;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -26] + 4], ap++;
[ap + -3] = [[ap + -27] + 5], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -28] + 6];
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + -4] = [[fp + -3] + 0];
[ap + -3] = [[fp + -3] + 1];
[ap + -2] = [[fp + -3] + 2];
[ap + -1] = [[fp + -3] + 3];
[ap + 0] = [ap + -32] + 7, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
call rel -197;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6396785288134949316130629444463792314741619, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -31] + 7, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -22] + 4, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 419219720643212038377608141195751405433785774963, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 419219720643212038380682486765942041684761737829, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -29] + 5, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -19] + 2, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 15900 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768195556, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 401;
[fp + -7] = [ap + 0] + 15900, ap++;
[ap + -1] = [[fp + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel -549;
jmp rel 370 if [ap + -7] != 0;
[fp + 0] = [ap + -2];
[fp + 1] = [ap + -1];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = 5, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 347;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = 4, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 1];
jmp rel 319;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -18] + 1];
[ap + 0] = [fp + 0] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -24] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -26] + 3], ap++;
[ap + -5] = [[ap + -27] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 279 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -21] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -22] + 3];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -27] + 4];
jmp rel 10;
[ap + -1] = [[ap + -26] + 4];
ap += 1;
[ap + 0] = [ap + -27] + 5, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 6;
[ap + 0] = [ap + -27] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel -636;
jmp rel 226 if [ap + -7] != 0;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 204;
[ap + 0] = [[fp + 0] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 171;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = 1, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -20] + 3];
jmp rel 136;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -21] + 3];
[ap + 0] = [fp + 0] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -27] + 4], ap++;
[ap + -4] = [[ap + -28] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -29] + 6];
jmp rel 98;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -26] + 4], ap++;
[ap + -3] = [[ap + -27] + 5], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -28] + 6];
[ap + 0] = 2, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -32] + 7];
jmp rel 63;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + 0] = [fp + 0] + [ap + -5], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
%{ memory[ap + 0] = memory[ap + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -39] + 8];
jmp rel 30;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -40] + 8];
[ap + 0] = [fp + 0] + [ap + -6], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + -6] = [[fp + -3] + 0];
[ap + -5] = [[fp + -3] + 1];
[ap + -4] = [[fp + -3] + 2];
[ap + -3] = [[fp + -3] + 3];
[ap + -2] = [[fp + -3] + 4];
[ap + -1] = [[fp + -3] + 5];
[ap + 0] = [ap + -47] + 9, ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 6, ap++;
call rel -230;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -41] + 9, ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -34] + 8, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6396785288134949316130629444463792314741619, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -31] + 7, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -22] + 4, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 419219720643212038377608141195751405433785774963, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 419219720643212038380682486765942041684761737829, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -29] + 5, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -19] + 2, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1014900818724271728842439076957192829503821588950108430443072887165436450886, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -3] = [[fp + -4] + 3];
[ap + -2] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 146 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1239149872729906871793169171313897310809028090219849129902089947133222824240, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -4] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 116 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 14, ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 82;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + 0] = 0, ap++;
[ap + 0] = 1239149872729906871793169171313897310809028090219849129902089947133222824240, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -11] = [[ap + -10] + 1];
[ap + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
[fp + -3] = [[ap + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 6], ap++;
jmp rel 47 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3813;
jmp rel 12 if [ap + -3] != 0;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 44;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [[ap + -56] + 5], ap++;
[ap + 0] = [ap + -57] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 7], ap++;
[ap + 0] = [[ap + -60] + 8], ap++;
ret;
ap += 41;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 10;
ap += 52;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [[fp + -4] + 14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 62;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 95;
[fp + -8] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -6] = [ap + 0] + [fp + -7], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 76;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
%{ memory[ap + 0] = memory[fp + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 53;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [fp + -7] + [fp + -3], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 17;
[ap + 1] = [fp + -3] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
call rel -57;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 4791;
[ap + 0] = [ap + -1] + 4790, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 3], ap++;
[ap + 0] = [ap + -1] + 2770, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -10] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 120;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + 0] = [fp + -11] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 96;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 55 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [fp + -7] + [ap + -7], ap++;
[ap + 0] = [fp + -6] + [ap + -2], ap++;
[ap + -2] = [[fp + -9] + 0];
[ap + -1] = [[fp + -9] + 1];
[fp + -5] = [[fp + -9] + 2];
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = [[fp + -9] + 3], ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
%{ memory[ap + 0] = 2070 <= memory[ap + -18] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -19] = [ap + 0] + 2070, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 18;
[ap + -19] = [ap + 0] + 2070, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -83;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [fp + -7] + [ap + -6], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + -2] = [[fp + -9] + 0];
[ap + -1] = [[fp + -9] + 1];
[fp + -5] = [[fp + -9] + 2];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[fp + -9] + 3], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -6] = [[fp + -9] + 1];
[fp + -5] = [[fp + -9] + 2];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -9] + 3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 95;
[fp + -8] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -6] = [ap + 0] + [fp + -7], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 76;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
%{ memory[ap + 0] = memory[fp + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 53;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [fp + -7] + [fp + -3], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 17;
[ap + 1] = [fp + -3] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
call rel -57;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = 5220 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768206236, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 134;
[fp + -8] = [ap + 0] + 5220, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -6] = [ap + 0] + [fp + -7], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 115;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
%{ memory[ap + 0] = memory[fp + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 92;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [fp + -7] + [fp + -3], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + 3] = [[ap + -10] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -14] + 3];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -14] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 2, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 17;
[ap + 1] = [fp + -3] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
call rel -96;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = 8910 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768202546, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 66;
[fp + -7] = [ap + 0] + 8910, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 31 if [ap + -2] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
call rel 3243;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -48;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = 17, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[fp + -8] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[fp + -8] + 1], ap++;
[ap + -1] = [[fp + -8] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -8] + 3, ap++;
jmp rel 9 if [fp + -3] != 0;
ap += 16;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
jmp rel 133;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 85;
[fp + -3] = [ap + 0] + 2, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 73;
[fp + -3] = [ap + 0] + 3, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 61;
[fp + -3] = [ap + 0] + 4, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 49;
[fp + -3] = [ap + 0] + 5, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 37;
[fp + -3] = [ap + 0] + 6, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 25;
[fp + -3] = [ap + 0] + 7, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 121156777586399790536503236618864242150999889423368672100890466, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = 72057594037927936, ap++;
jmp rel 6;
ap += 1;
[ap + 0] = 281474976710656, ap++;
jmp rel 6;
ap += 2;
[ap + 0] = 1099511627776, ap++;
jmp rel 6;
ap += 3;
[ap + 0] = 4294967296, ap++;
jmp rel 6;
ap += 4;
[ap + 0] = 16777216, ap++;
jmp rel 6;
ap += 5;
[ap + 0] = 65536, ap++;
jmp rel 6;
ap += 6;
[ap + 0] = 256, ap++;
jmp rel 15 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], memory[ap + -1]) %}
[ap + 4] = [[ap + -9] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -12] + 1], ap++;
[ap + -1] = [[ap + -13] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -4] = [ap + -3] + [ap + -1];
%{ memory[ap + 0] = (memory[ap + -6] + memory[ap + -1]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -17] + 3];
jmp rel 91;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[ap + -17] + 3];
[ap + 0] = [ap + -17] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -20] = [ap + 0] + 16, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 40;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = 16, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + -3] = [ap + 1] + [ap + -24], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 12;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
call rel 3169;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = 9223372036854775808, ap++;
%{ memory[ap + 0] = (memory[ap + -1] + memory[ap + -3]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 16;
[ap + 1] = [ap + -2] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155801121779312277930962096923588980599, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155801121779312277930962096923588980599, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -19] + 4, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
jmp rel [fp + -17];
jmp rel 212;
jmp rel 196;
jmp rel 194;
jmp rel 192;
jmp rel 63;
jmp rel 40;
jmp rel 26;
jmp rel 12 if [fp + -9] != 0;
[ap + 0] = 553132481214675521502977957974509639062080100631756862105218886163371506175, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -5] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 10;
[ap + 0] = 1081328092001983627049499256119332660943014795026490716554494543777654115287, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -5] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 187;
[ap + 0] = 1291924484015741933195105472014600539495279993452337828418116470835452386035, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 175;
[ap + 0] = 8813164419572624786348158582484923413642906505121137998245654293812075007, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3115;
jmp rel 154;
jmp rel [fp + -14];
jmp rel 106;
jmp rel 86;
jmp rel 64;
jmp rel 42;
jmp rel 22;
[ap + 0] = 1626227294871341692184531488483099379566558805070612629747022071796067235567, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3098;
ret;
[ap + 0] = 631001698090861941266594478141424996448792735361730796839001404131512868165, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3123;
ret;
[ap + 0] = 1245122244397175719083510515004414703368508330573240093302615378479757240523, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3144;
ret;
[ap + 0] = 806471913049521371347551596253570860605694955765876315584351388340620666484, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3168;
ret;
[ap + 0] = 546181701065214439404709229732084346960873509376302741090290025021869774129, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3194;
ret;
[ap + 0] = 1221844950461668644184351770071269826093464974336195162903487041424181085541, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3215;
ret;
[ap + 0] = 1133463724428960453051730885185941190788667837348964852878744252288314875905, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
jmp rel 13;
[ap + 0] = 216304040261212828014465466413059055700362004681164976468519126227788497638, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 156362789606235336197082706430724496541581765233419757414883543862011615425, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 68 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
jmp rel 6 if [ap + -3] != 0;
[ap + 0] = 1, ap++;
jmp rel 4;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 36 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 156362789606235336197082706430724496541581765233419757414883543862011615425, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -9] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
[ap + -2] = [[ap + -8] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 6], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 5], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -9] + 5], ap++;
[ap + 0] = [ap + -10] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -12] + 7], ap++;
[ap + 0] = [[ap + -13] + 8], ap++;
ret;
ap += 3;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 145581270279722262409219780158987462040688757148004254037992015513052605548, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
ap += 11;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1239149872729906871793169171313897310809028090219849129902089947133222824240, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 115;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[fp + -3] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
jmp rel 12 if [ap + -2] != 0;
ap += 19;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 1, ap++;
jmp rel 70;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -7] + 0], ap++;
[ap + -4] = [[ap + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -10] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -9] + 1], ap++;
[ap + -7] = [[ap + -10] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -22] = [[ap + -21] + 1];
[ap + -4] = [[ap + -21] + 2];
[ap + -5] = [[ap + -21] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 5], ap++;
jmp rel 31 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [[ap + -23] + 4], ap++;
[ap + 0] = [ap + -24] + 7, ap++;
jmp rel 6 if [ap + -3] != 0;
[ap + 0] = 1, ap++;
jmp rel 4;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 10;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [[ap + -33] + 4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -35] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -37] + 6], ap++;
[ap + 0] = [[ap + -38] + 7], ap++;
ret;
ap += 18;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 10;
ap += 29;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 145 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[fp + -4] = [[fp + -5] + 9];
[ap + -3] = [[fp + -5] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 115 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 14];
[ap + -4] = [[fp + -5] + 15];
[fp + -4] = [[fp + -5] + 16];
[ap + -3] = [[fp + -5] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 14) %}
[ap + 0] = [[fp + -5] + 19], ap++;
jmp rel 85 if [ap + -1] != 0;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 18], ap++;
[ap + 0] = [fp + -5] + 21, ap++;
[ap + 0] = [[fp + -5] + 20], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 46;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -7] + 0];
[ap + 0] = [fp + -3] + [ap + -1], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -9] = [[ap + -8] + 1];
[fp + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -11] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [[ap + -17] + 7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642104203229548495787928534675319, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
ap += 12;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[fp + -5] + 18], ap++;
[ap + 0] = [fp + -5] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 20], ap++;
[ap + 0] = [[fp + -5] + 21], ap++;
ret;
ap += 17;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
ret;
ap += 22;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = 1560329301042819786907650825112720766127061167678294103834233574779148533800, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[ap + -4] = [[fp + -5] + 3];
[ap + -3] = [[fp + -5] + 4];
[ap + -2] = [[fp + -5] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 7], ap++;
jmp rel 79 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 8], ap++;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[fp + 0] = [fp + -5] + 10;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 37 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 2730;
jmp rel 16 if [ap + -6] != 0;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 12;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -7], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7891998437966260601762371672023996916393715052535837300, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
[ap + 0] = [[fp + -5] + 9], ap++;
ret;
jmp rel 12 if [fp + -3] != 0;
ap += 104;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
%{ memory[ap + 0] = (memory[fp + -5] + memory[fp + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 1061;
[ap + 1] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[fp + -9] + 0];
[ap + 0] = 31, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 1];
jmp rel 909;
[ap + -1] = [[fp + -9] + 1];
[ap + 0] = [fp + -9] + 2, ap++;
[ap + -5] = [ap + 0] + 31, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 761;
[ap + 0] = 31, ap++;
[ap + -7] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 732;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + -2] = [ap + 0] + 16, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 525;
[ap + 0] = 16, ap++;
[ap + -4] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 254;
[ap + -1] = [[ap + -5] + 0];
ap += 15;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -21] + 1], ap++;
[ap + 3] = [[ap + -22] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -26] + 3];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -21] + 1];
ap += 5;
[ap + 0] = [ap + -26] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -26] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 16, ap++;
[ap + -31] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 183;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 2720;
jmp rel 168 if [ap + -3] != 0;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -18], memory[ap + -1]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -25] = [ap + -3] + [ap + -1];
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 4];
jmp rel 127;
[ap + -1] = [[ap + -14] + 4];
[ap + 0] = [ap + -4] * 340282366920938463463374607431768211456, ap++;
[ap + 0] = 16, ap++;
[ap + 0] = [ap + -2] + [ap + -31], ap++;
[ap + -4] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 5];
jmp rel 47;
[ap + -1] = [[ap + -19] + 5];
[ap + 0] = 16, ap++;
[ap + -7] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 6];
jmp rel 22;
[ap + -1] = [[ap + -22] + 6];
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 2660;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 80;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -48] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 66;
ap += 2;
[ap + 0] = [ap + -22] + 6, ap++;
[ap + 0] = [ap + -10], ap++;
call rel 2625;
jmp rel 52 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -30] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 22;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 254;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 42;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 35;
ap += 31;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -48] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 21;
ap += 44;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
jmp rel 14;
ap += 55;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -64] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -7] + 1], ap++;
[ap + 3] = [[ap + -8] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -12] + 3];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -7] + 1];
ap += 5;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -12] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
call rel 2483;
jmp rel 206 if [ap + -3] != 0;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -16], memory[ap + -1]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -23] = [ap + -3] + [ap + -1];
[ap + 0] = 16, ap++;
[ap + -1] = [ap + 1] + [ap + -38], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 4];
jmp rel 165;
[ap + -1] = [[ap + -14] + 4];
[ap + 0] = [ap + -14] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 2448;
jmp rel 150 if [ap + -3] != 0;
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 126;
[ap + -1] = [[ap + -7] + 0];
[ap + 0] = [ap + -42] * [ap + -4], ap++;
[ap + 0] = 16, ap++;
[ap + 0] = [ap + -2] + [ap + -24], ap++;
[ap + -4] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 47;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = 16, ap++;
[ap + -7] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 2];
jmp rel 22;
[ap + -1] = [[ap + -15] + 2];
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 2406;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 80;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -41] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 66;
ap += 2;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = [ap + -10], ap++;
call rel 2371;
jmp rel 52 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -23] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 22;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 220;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 49;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 42;
ap += 31;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -41] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 28;
ap += 37;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
jmp rel 21;
ap += 48;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -65] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 7;
ap += 61;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 44;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -47] + 0], ap++;
[ap + 3] = [[ap + -48] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -52] + 2];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -47] + 0];
ap += 5;
[ap + 0] = [ap + -52] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -52] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 130;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 16, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 1];
jmp rel 47;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 16, ap++;
[ap + -5] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 2];
jmp rel 22;
[ap + -1] = [[ap + -12] + 2];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 2186;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 86;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -38] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 72;
ap += 2;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
call rel 2151;
jmp rel 58 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -27] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 28;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -99], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 21;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 14;
ap += 29;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -38] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 90;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -98] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 64;
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -70] + 0];
jmp rel 47;
[ap + -1] = [[ap + -69] + 0];
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -73] + 1];
jmp rel 22;
[ap + -1] = [[ap + -72] + 1];
[ap + 0] = [ap + -72] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 2016;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 9;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 88;
ap += 20;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -95] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 74;
ap += 2;
[ap + 0] = [ap + -72] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 1981;
jmp rel 60 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [fp + -4] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 3;
[ap + -9] = [[fp + -7] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 9;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 69;
[ap + 0] = [fp + -9] + 2, ap++;
jmp rel 12 if [fp + -5] != 0;
ap += 27;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 47;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 1];
jmp rel 22;
[ap + -1] = [[ap + -7] + 1];
[ap + 0] = [ap + -7] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 1863;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 4;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 73;
ap += 15;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -25] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 59;
ap += 2;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 1828;
jmp rel 45 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -5] + memory[fp + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 18;
[ap + 1] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
ap += 1;
[ap + 0] = [fp + -6] * [ap + -5], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4] + [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 4;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 99;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = 1670 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209786, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 32;
[fp + -7] = [ap + 0] + 1670, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -27;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1129664241071644691371073118594794953592340198277473102285062464307545102410, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -17] + 0];
[fp + -18] = [[fp + -17] + 1];
[ap + -3] = [[fp + -17] + 2];
[ap + -2] = [[fp + -17] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -17]) %}
[ap + 0] = [[fp + -17] + 5], ap++;
jmp rel 151 if [ap + -1] != 0;
[ap + 0] = [[fp + -17] + 6], ap++;
[ap + -1] = [ap + 0] + [fp + -14], ap++;
[ap + 0] = [[fp + -17] + 4], ap++;
[ap + 0] = [fp + -17] + 7, ap++;
jmp rel 129 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 1129664241071644691371073118594794953592340198277473102285062464307545102410, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + -3] = [[ap + -4] + 2];
[ap + -2] = [[ap + -4] + 3];
[fp + -13] = [[ap + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -4]) %}
[ap + 0] = [[ap + -4] + 6], ap++;
jmp rel 105 if [ap + -1] != 0;
[ap + 0] = [[ap + -5] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1804974537427402286278400303388660593172206410421526189703894999503593972097, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 7];
[ap + -4] = [[ap + -9] + 8];
[ap + -3] = [[ap + -9] + 9];
[ap + -2] = [[ap + -9] + 10];
[fp + -11] = [[ap + -9] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9] + 7) %}
[ap + 0] = [[ap + -9] + 13], ap++;
jmp rel 80 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 289565229787362368933081636443797405535488074065834425092593015835915391953, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 14];
[ap + -4] = [[ap + -14] + 15];
[ap + -3] = [[ap + -14] + 16];
[ap + -2] = [[ap + -14] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14] + 14) %}
[ap + 0] = [[ap + -14] + 19], ap++;
jmp rel 56 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 20], ap++;
[ap + -1] = [ap + 0] + [fp + -16], ap++;
[ap + 0] = [[ap + -17] + 18], ap++;
[ap + 0] = [ap + -18] + 21, ap++;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 289565229787362368933081636443797405535488074065834425092593015835915391953, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + -3] = [[ap + -4] + 2];
[ap + -2] = [[ap + -4] + 3];
[fp + -15] = [[ap + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -4]) %}
[ap + 0] = [[ap + -4] + 6], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[ap + -5] + 5], ap++;
[ap + 0] = [ap + -6] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -5] + 5], ap++;
[ap + 0] = [ap + -6] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -8] + 7], ap++;
[ap + 0] = [[ap + -9] + 8], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8788796444268736115146015715539858168386878675988363831466093670260, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
ap += 8;
[ap + 0] = [[ap + -23] + 18], ap++;
[ap + 0] = [ap + -24] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -26] + 20], ap++;
[ap + 0] = [[ap + -27] + 21], ap++;
ret;
ap += 13;
[ap + 0] = [[ap + -23] + 12], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -26] + 14], ap++;
[ap + 0] = [[ap + -27] + 15], ap++;
ret;
ap += 18;
[ap + 0] = [[ap + -23] + 5], ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [[ap + -27] + 8], ap++;
ret;
ap += 20;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 34331236110424750449789123888827570965921248008961589753654961522, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -17] + 4], ap++;
[ap + 0] = [fp + -17] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -17] + 6], ap++;
[ap + 0] = [[fp + -17] + 7], ap++;
ret;
ap += 8;
call rel 1933;
[ap + 0] = [ap + -1] + 1932, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 57100, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -8] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -8] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 272;
[fp + -8] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 4, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[fp + 0] = [ap + -4];
[fp + 1] = [ap + -3];
jmp rel 235 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 3], ap++;
[fp + 5] = [ap + -4];
[fp + 4] = [ap + -3];
[fp + 6] = [ap + -2];
[fp + 7] = [ap + -1];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
call rel -6882;
[fp + 2] = [ap + -4];
jmp rel 205 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 3] = [ap + -3];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -2191;
jmp rel 157 if [ap + -5] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -7] = [[fp + -5] + 1];
[ap + -5] = [[fp + -5] + 2];
[ap + -4] = [[fp + -5] + 3];
[ap + -3] = [[fp + -5] + 4];
[ap + -2] = [[fp + -5] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 7], ap++;
jmp rel 139 if [ap + -1] != 0;
[ap + 0] = 1251553048250390660625724047769463642565657892592746218088798745207499342932, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + 3] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -18] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -7] = [[ap + -18] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 8];
[ap + -5] = [[fp + -5] + 9];
[ap + -4] = [[fp + -5] + 10];
[ap + -6] = [[fp + -5] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 8) %}
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 78 if [ap + -1] != 0;
[ap + 0] = 1251553048250390660625724047769463642565657892592746218088798745207499342932, ap++;
[ap + -1] = [[ap + -5] + 0];
[fp + 3] = [[ap + -5] + 1];
[ap + 0] = [[ap + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 15];
[ap + -6] = [[fp + -5] + 16];
[ap + -5] = [[fp + -5] + 17];
[ap + -8] = [[fp + -5] + 18];
[ap + -4] = [[fp + -5] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 15) %}
[ap + 0] = [[fp + -5] + 21], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -5] + 20], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + -5] + 22, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
call rel -222;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -5] + 20], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + -5] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 22], ap++;
[ap + 0] = [[fp + -5] + 23], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
ret;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 10, ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
[ap + 0] = [[fp + -5] + 9], ap++;
jmp rel 8;
ap += 2;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
ap += 11;
call rel 1626;
[ap + 0] = [ap + -1] + 1625, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 82400, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -8] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -8] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 423;
[fp + -8] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[fp + 0] = [ap + -4];
[fp + 1] = [ap + -3];
jmp rel 386 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 3], ap++;
[ap + 0] = [[ap + -5] + 4], ap++;
[ap + 0] = [[ap + -6] + 5], ap++;
[fp + 7] = [ap + -6];
[fp + 10] = [ap + -5];
[fp + 8] = [ap + -2];
[fp + 9] = [ap + -1];
[fp + 6] = [ap + -3];
[fp + 5] = [ap + -4];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 5], ap++;
call rel -7261;
[fp + 3] = [ap + -4];
jmp rel 350 if [ap + -3] != 0;
[ap + 0] = 163642030359788167989880689266487961609037798707978896351634523267451167967, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -2] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -12] + 0], ap++;
[ap + -4] = [[ap + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -15] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -7] = [[ap + -15] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
call rel 1236;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -38] + 3, ap++;
jmp rel 293 if [ap + -5] != 0;
jmp rel [ap + -4];
jmp rel 26;
jmp rel 8;
jmp rel 4;
jmp rel 4;
jmp rel 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7021320231821291044771353108380866553282889096957870412, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[ap + 0] = 163642030359788167989880689266487961609037798707978896351634523267451167967, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + -35] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -7] + 0], ap++;
[ap + -4] = [[ap + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -10] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -9] + 1], ap++;
[ap + -7] = [[ap + -10] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[fp + 4] = [ap + -13] + 3;
[ap + 0] = [ap + -12] + 3, ap++;
jmp rel [ap + -3];
jmp rel 90;
jmp rel 60;
jmp rel 30;
ap += 5;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -27] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -12] = [[ap + -26] + 3];
[ap + -2] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -28] + 7, ap++;
jmp rel 97;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -28] + 9, ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
[ap + 0] = [[ap + -30] + 8], ap++;
jmp rel 179;
ap += 5;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -27] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -12] = [[ap + -26] + 3];
[ap + -2] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -28] + 7, ap++;
jmp rel 69;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -28] + 9, ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
[ap + 0] = [[ap + -30] + 8], ap++;
jmp rel 151;
ap += 5;
[ap + 0] = 0, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -27] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -12] = [[ap + -26] + 3];
[ap + -2] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -28] + 7, ap++;
jmp rel 41;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -28] + 9, ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
[ap + 0] = [[ap + -30] + 8], ap++;
jmp rel 123;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -22] = [[ap + -21] + 1];
[ap + -3] = [[ap + -21] + 2];
[ap + -7] = [[ap + -21] + 3];
[ap + -2] = [[ap + -21] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 6], ap++;
jmp rel 102 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 7];
[ap + -4] = [[ap + -26] + 8];
[ap + -3] = [[ap + -26] + 9];
[ap + -2] = [[ap + -26] + 10];
[ap + -10] = [[ap + -26] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26] + 7) %}
[ap + 0] = [[ap + -26] + 13], ap++;
jmp rel 80 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 12], ap++;
[ap + 0] = [ap + -28] + 14, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -17], ap++;
[fp + 2] = [ap + -20];
call rel -2741;
jmp rel 31 if [ap + -5] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + 2] + 0];
[ap + -7] = [[fp + 2] + 1];
[ap + -5] = [[fp + 2] + 2];
[ap + -4] = [[fp + 2] + 3];
[ap + -3] = [[fp + 2] + 4];
[ap + -2] = [[fp + 2] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 2]) %}
[ap + 0] = [[fp + 2] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 2] + 8, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
call rel -361;
ret;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + 0] = [fp + 2] + 10, ap++;
[ap + 0] = [[fp + 2] + 8], ap++;
[ap + 0] = [[fp + 2] + 9], ap++;
jmp rel 8;
ap += 2;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[ap + -27] + 12], ap++;
[ap + 0] = [ap + -28] + 16, ap++;
[ap + 0] = [[ap + -29] + 14], ap++;
[ap + 0] = [[ap + -30] + 15], ap++;
jmp rel 9;
ap += 5;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -28] + 9, ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
[ap + 0] = [[ap + -30] + 8], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 30 if [fp + -13] != 0;
ap += 15;
jmp rel 14 if [fp + -5] != 0;
[ap + 0] = 553132481214675521502977957974509639062080100631756862105218886163371506175, ap++;
[ap + -1] = [[ap + -18] + 0];
[fp + -4] = [[ap + -18] + 1];
[fp + -3] = [[ap + -18] + 2];
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20], ap++;
jmp rel 33;
[ap + 0] = 1081328092001983627049499256119332660943014795026490716554494543777654115287, ap++;
[ap + -1] = [[ap + -18] + 0];
[fp + -4] = [[ap + -18] + 1];
[fp + -3] = [[ap + -18] + 2];
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -20], ap++;
jmp rel 21;
[ap + 0] = 8813164419572624786348158582484923413642906505121137998245654293812075007, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 271;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -14] + 0];
[fp + -15] = [[fp + -14] + 1];
[ap + -5] = [[fp + -14] + 2];
[ap + -4] = [[fp + -14] + 3];
[ap + -3] = [[fp + -14] + 4];
[ap + -2] = [[fp + -14] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -14]) %}
[ap + 0] = [[fp + -14] + 7], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -14] + 6], ap++;
[ap + 0] = [fp + -14] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -14] + 6], ap++;
[ap + 0] = [fp + -14] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -14] + 8], ap++;
[ap + 0] = [[fp + -14] + 9], ap++;
ret;
[ap + 0] = 18446744073709551616, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -4], memory[ap + -1]) %}
[ap + 5] = [[fp + -7] + 0], ap++;
[ap + 5] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -7] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -4] = [ap + -3] + [ap + -1];
%{ memory[ap + 0] = memory[ap + -2] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 115;
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 4];
%{ memory[ap + 0] = memory[ap + -3] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -7] + 5];
jmp rel 91;
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -5] = [[fp + -5] + 0];
[ap + -6] = [[fp + -5] + 1];
[ap + 0] = 18446744073709551616, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[fp + -7] + 6], ap++;
[ap + 5] = [[fp + -7] + 7], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -7] + 8], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -7] + 9];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
%{ memory[ap + 0] = memory[ap + -4] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -7] + 10];
jmp rel 39;
[ap + 0] = [ap + -5] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 10];
%{ memory[ap + 0] = memory[ap + -5] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -7] + 11];
jmp rel 17;
[ap + 0] = [ap + -6] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 11];
ap += 5;
[ap + -12] = [[ap + -10] + 0];
[ap + -13] = [[ap + -10] + 1];
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + 2, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 14;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 11, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 14;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 14;
ap += 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
%{ memory[ap + 0] = 2240 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209216, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 64;
[fp + -6] = [ap + 0] + 2240, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 42;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 1] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 12;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
call rel -41;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = 9223372036854775808, ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[fp + -15] = [[fp + -3] + 0];
[fp + -14] = [[fp + -3] + 1];
[fp + -13] = [[fp + -3] + 2];
[fp + -12] = [[fp + -3] + 3];
[fp + -11] = [[fp + -3] + 4];
[fp + -10] = [[fp + -3] + 5];
[fp + -9] = [[fp + -3] + 6];
[fp + -8] = [[fp + -3] + 7];
[fp + -7] = [[fp + -3] + 8];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 9, ap++;
ret;
ap += 2;
[fp + -13] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[fp + -3] + 2];
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[fp + 0] = [fp + -6];
[fp + 1] = [fp + -5] + 3;
call rel 648;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
[fp + -11] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[fp + 0] = [fp + -6];
[fp + 1] = [fp + -5] + 3;
call rel 607;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
[fp + -13] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -3] + 0];
[fp + -8] = [ap + 0] + [fp + -9], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[fp + 0] = [fp + -6];
[fp + 1] = [fp + -5] + 3;
call rel 565;
jmp rel 13 if [ap + -3] != 0;
[fp + -7] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
[fp + -13] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -3] + 0];
[fp + -8] = [ap + 0] + [fp + -9], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[fp + 0] = [fp + -6];
[fp + 1] = [fp + -5] + 3;
call rel 521;
jmp rel 13 if [ap + -3] != 0;
[fp + -7] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
[fp + -11] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[fp + 0] = [fp + -6];
[fp + 1] = [fp + -5] + 3;
call rel 478;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
[fp + -13] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[fp + -3] + 2];
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[fp + 0] = [fp + -6];
[fp + 1] = [fp + -5] + 3;
call rel 435;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 8210 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768203246, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 141;
[fp + -8] = [ap + 0] + 8210, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
jmp rel 13 if [fp + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 68 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 45 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 382;
[ap + 0] = [ap + -41] + 2, ap++;
jmp rel 26 if [ap + -6] != 0;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -6] = [[fp + -4] + 0];
[ap + -5] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -3] = [[fp + -4] + 3];
[ap + -2] = [[fp + -4] + 4];
[ap + -1] = [[fp + -4] + 5];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -107;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 20;
ap += 24;
[ap + 0] = [ap + -42] + 3, ap++;
jmp rel 5;
ap += 32;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -37], ap++;
jmp rel 7;
ap += 40;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
%{ memory[ap + 0] = memory[fp + -3] < 16 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 16, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 111;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211440, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010256, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
jmp rel [ap + -2];
jmp rel 90;
jmp rel 84;
jmp rel 78;
jmp rel 72;
jmp rel 66;
jmp rel 60;
jmp rel 54;
jmp rel 48;
jmp rel 42;
jmp rel 36;
jmp rel 30;
jmp rel 24;
jmp rel 18;
jmp rel 12;
jmp rel 6;
[ap + 0] = 1, ap++;
jmp rel 60;
[ap + 0] = 256, ap++;
jmp rel 56;
[ap + 0] = 65536, ap++;
jmp rel 52;
[ap + 0] = 16777216, ap++;
jmp rel 48;
[ap + 0] = 4294967296, ap++;
jmp rel 44;
[ap + 0] = 1099511627776, ap++;
jmp rel 40;
[ap + 0] = 281474976710656, ap++;
jmp rel 36;
[ap + 0] = 72057594037927936, ap++;
jmp rel 32;
[ap + 0] = 18446744073709551616, ap++;
jmp rel 28;
[ap + 0] = 4722366482869645213696, ap++;
jmp rel 24;
[ap + 0] = 1208925819614629174706176, ap++;
jmp rel 20;
[ap + 0] = 309485009821345068724781056, ap++;
jmp rel 16;
[ap + 0] = 79228162514264337593543950336, ap++;
jmp rel 12;
[ap + 0] = 20282409603651670423947251286016, ap++;
jmp rel 8;
[ap + 0] = 5192296858534827628530496329220096, ap++;
jmp rel 4;
[ap + 0] = 1329227995784915872903807060280344576, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 573087285299505011920718992710461799, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 6;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
jmp rel 13 if [ap + -1] != 0;
ap += 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + -4] = [ap + 0] + 2, ap++;
jmp rel 13 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + -5] = [ap + 0] + 3, ap++;
jmp rel 30 if [ap + -1] != 0;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -7] = [[ap + -6] + 1];
[fp + -4] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 11 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [ap + -8] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
ret;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [ap + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [[ap + -11] + 7], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -9] = [[ap + -2] + 1];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
ret;
ap += 9;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
%{ memory[ap + 0] = 1670 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209786, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 32;
[fp + -7] = [ap + 0] + 1670, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -27;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 97;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 73;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 49;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -7] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 11 if [ap + -2] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 8;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 16;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
